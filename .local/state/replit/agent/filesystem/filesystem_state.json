{"file_contents":{"app.js":{"content":"/////// app.js\nconst path = require(\"node:path\");\nconst { Pool } = require(\"pg\");\nconst express = require(\"express\");\nconst session = require(\"cookie-session\");\nconst methodOverride = require('method-override');\nconst bcrypt = require(\"bcryptjs\");\nconst passport = require(\"passport\");\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst indexRouter = require(\"./routes/indexRouter\");\nconst logOutRouter = require(\"./routes/logOutRouter\");\nconst logInRouter = require(\"./routes/logInRouter\");\nconst signUpRouter = require(\"./routes/signUpRouter\");\nconst transactionRouter = require(\"./routes/transactionRouter\");\nconst accountRouter = require(\"./routes/accountRouter\");\nconst pool = require(\"./db/pool\");\n\nconst app = express();\napp.set(\"views\", path.join(__dirname, \"views\"));\napp.set(\"view engine\", \"ejs\");\n\napp.use(session({ secret: \"cats\", resave: false, saveUninitialized: false }));\napp.use(passport.session());\napp.use(express.urlencoded({ extended: false }));\napp.use(methodOverride('_method'));\n\napp.use(\"/log-in\", logInRouter);\napp.use(\"/log-out\", logOutRouter);\napp.use(\"/sign-up\", signUpRouter);\napp.use(\"/transaction\", transactionRouter);\napp.use(\"/account\", accountRouter);\napp.use(\"/\", indexRouter);\n\n// 3 functions below are important to create and maintain sessions\npassport.use(\n  new LocalStrategy(async (username, password, done) => {\n    try {\n      const { rows } = await pool.query(\"SELECT * FROM users WHERE username = $1\", [username]);\n      const user = rows[0];\n\n      if (!user) {\n        return done(null, false, { message: \"Incorrect username\" });\n      }\n      const match = await bcrypt.compare(password, user.password);\n      if (!match) {\n        // passwords do not match!\n        return done(null, false, { message: \"Incorrect password\" })\n      }\n      return done(null, user);\n    } catch(err) {\n      return done(err);\n    }\n  })\n);\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id, done) => {\n  try {\n    const { rows } = await pool.query(\"SELECT * FROM users WHERE id = $1\", [id]);\n    const user = rows[0];\n\n    done(null, user);\n  } catch(err) {\n    done(err);\n  }\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, '0.0.0.0', () => console.log(`app listening on port ${PORT}!`));","size_bytes":2302},"compose.yaml":{"content":"services:\n  server:\n    build:\n      context: .\n    environment:\n      NODE_ENV: production\n    ports:\n      - 3000:3000\n    depends_on:\n      - db\n  db:\n    container_name: postgres0.5\n    image: postgres:latest\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=mysecretpassword\n      - POSTGRES_DB=basics\n    ports:\n      - \"5432:5432\"\n    restart: always\n    volumes:\n    - pg_data:/var/lib/postgresql/data\n\n  pgadmin:\n    container_name: pgadmin4\n    image: dpage/pgadmin4:latest\n    environment:\n      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}\n      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}\n    ports:\n      - \"5050:80\"\n    restart: always\n    volumes:\n    - pgadmin:/var/lib/pgadmin\n  \nvolumes:\n  pg_data:\n  pgadmin:","size_bytes":744},"db/pool.js":{"content":"const { Pool } = require(\"pg\");\nrequire('dotenv').config();\n\n// Use Replit's DATABASE_URL if available, otherwise fall back to individual env vars\nconst connectionString = process.env.DATABASE_URL || \n  `postgresql://${process.env.POSTGRES_USER}:${process.env.POSTGRES_PASSWORD}@${process.env.PGHOST || 'db'}:${process.env.PGPORT || 5432}/${process.env.POSTGRES_DB}`;\n\nmodule.exports = new Pool({\n  connectionString: connectionString\n});","size_bytes":437},"routes/accountRouter.js":{"content":"const {Router} = require(\"express\");\nconst methodOverride = require('method-override');\nconst accountRouter = Router();\nconst pool = require(\"../db/pool\");\n\naccountRouter.use(methodOverride('_method'));\n\naccountRouter.get(\"/\", async function(req, res){\n  res.render(\"account\", { user: req.user});\n});\n\naccountRouter.put(\"/money\", async (req, res, next) => {\n  try {\n    const convetedMoney = Math.floor(req.body.money * 100);\n    await pool.query(\"UPDATE users SET money = $2 WHERE id = $1\", \n      [req.user.id, convetedMoney]);\n    res.redirect(\"/account\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\naccountRouter.put(\"/credit\", async (req, res, next) => {\n  try {\n    const convetedMoney = Math.floor(req.body.credit * 100);\n    await pool.query(\"UPDATE users SET credit = $2 WHERE id = $1\", \n      [req.user.id, convetedMoney]);\n    res.redirect(\"/account\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\naccountRouter.put(\"/credit-subtract\", async (req, res, next) => {\n  try {\n    const convetedMoney = Math.floor((req.body.credit) * 100);\n    await pool.query(\"UPDATE users SET credit = credit - $2 WHERE id = $1\",   //only one input changed, ideally find better way to handle this\n      [req.user.id, convetedMoney]);\n    res.redirect(\"/account\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\nmodule.exports = accountRouter;\n","size_bytes":1416},"routes/indexRouter.js":{"content":"const {Router} = require(\"express\");\nvar moment = require('moment');\nconst indexRouter = Router();\nconst pool = require(\"../db/pool\");\n\nindexRouter.get(\"/\", async function(req, res) {\n  let transactions = null;\n  if(req.user != null){\n    transactions = (await fetchTransactions(req.user.id));\n  }\n  var usedCredit = 0;\n  var totalSum = 0;\n  var closingSum = 0;\n  res.render(\"index\", { user: req.user, transactions: transactions, moment: moment, \n    usedCredit: usedCredit, totalSum: totalSum, closingSum: closingSum});\n});\n\n// get items for id\nasync function fetchTransactions(user_id){\n  try{\n    const { rows } = await pool.query(\"SELECT * FROM transactions WHERE user_id = $1 ORDER BY date, id\", [user_id]);\n    const items = rows;\n    if(items) {\n      return items;\n    } else {\n      console.log('Transaction not found');\n    }\n  } catch(error) {\n    console.error('Error, cannot find transactions.');\n  }\n}\n\n// get user info for id\nasync function fetchUser(id){\n  try{\n    const { rows } = await pool.query(\"SELECT * FROM users WHERE id = $1\", [id]);\n    const user = rows[0];\n    if(user) {\n      return user;\n    } else {\n      console.log('User not found');\n    }\n  } catch(error) {\n    console.error('Error, cannot find user.');\n  }\n}\n\n\nmodule.exports = indexRouter;","size_bytes":1279},"routes/logInRouter.js":{"content":"const {Router} = require(\"express\");\nconst logInRouter = Router();\nconst passport = require(\"passport\");\n\nlogInRouter.post(\"/\", passport.authenticate(\"local\", {\n    successRedirect: \"/\",\n    failureRedirect: \"/\"\n  })\n);\n\nmodule.exports = logInRouter;","size_bytes":250},"routes/logOutRouter.js":{"content":"const {Router} = require(\"express\");\nconst logOutRouter = Router();\n\nlogOutRouter.get(\"/\", (req, res) => {\n  if(req.session){\n    req.session = null;\n    res.redirect(\"/\");\n  } else {\n    return next(err);\n  }\n});\n\nmodule.exports = logOutRouter;","size_bytes":245},"routes/signUpRouter.js":{"content":"const {Router} = require(\"express\");\nconst signUpRouter = Router();\nconst bcrypt = require(\"bcryptjs\");\nconst pool = require(\"../db/pool\");\n\nsignUpRouter.get(\"/\", (req, res) => {\n    res.render(\"sign-up-form\");\n});\n\nsignUpRouter.post(\"/\", async (req, res, next) => {\n try {\n  const hashedPassword = await bcrypt.hash(req.body.password, 10);\n  await pool.query(\"insert into users (username, password, money, credit) values ($1, $2, $3, $4)\", [req.body.username, hashedPassword, 0, 0]);\n  res.redirect(\"/\");\n } catch (error) {\n    console.error(error);\n    next(error);\n   }\n});\n\nmodule.exports = signUpRouter;","size_bytes":608},"routes/transactionRouter.js":{"content":"const {Router} = require(\"express\");\nconst methodOverride = require('method-override');\nconst transactionRouter = Router();\nconst pool = require(\"../db/pool\");\n\ntransactionRouter.use(methodOverride('_method'));\n\ntransactionRouter.get(\"/\", (req, res) => {\n  res.render(\"transaction\");\n});\n\ntransactionRouter.get(\"/:id/update\", async function(req, res) {\n  const item = await fetchTransaction(req.params.id); //more to just make sure that the transaction exists\n  console.log('looking for id = $1', [item.id]);\n  res.render(\"updateTransaction\", {user: req.user, transaction: item});\n});\n\ntransactionRouter.post(\"/\", async (req, res, next) => {\n  try {\n    const convetedMoney = Math.floor(req.body.money * 100);\n    await pool.query(\"insert into transactions (user_id, name, money, date, paid) values ($1, $2, $3, $4, $5)\", \n      [req.user.id, req.body.name_, convetedMoney, req.body.date, false]);\n    res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\ntransactionRouter.post(\"/closing-date\", async (req, res, next) => {\n  try {\n    await pool.query(\"insert into transactions (user_id, name, money, date, paid) values ($1, $2, $3, $4, $5)\", \n      [req.user.id, \"closing-date-official\", -1, req.body.date, true]);\n    res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\ntransactionRouter.post(\"/pay-off\", async (req, res, next) => {\n  try {\n    const currentDate = new Date();\n    const convetedMoney = Math.floor(req.body.money * 100);\n  console.log('paying off money = $1', [req.body.money]);\n    await pool.query(\"insert into transactions (user_id, name, money, date, paid) values ($1, $2, $3, $4, $5)\", \n      [req.user.id, \"pay-off-official\", convetedMoney, currentDate, true]);\n    await pool.query(\"UPDATE users SET money = money - $2 WHERE id = $1\", \n      [req.user.id, convetedMoney]);\n    res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\ntransactionRouter.put(\"/:id/update\", async (req, res, next) => {\n  try {\n    const convetedMoney = Math.floor(req.body.money * 100);\n    await pool.query(\"UPDATE transactions SET name = $2, money = $3, date = $4, paid = $5 WHERE id = $1\", \n      [req.params.id, req.body.name_, convetedMoney, req.body.date, false]);\n    res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\ntransactionRouter.put(\"/:id/pay\", async (req, res, next) => {\n  try {\n    const item = await fetchTransaction(req.params.id);\n    await pool.query(\"UPDATE transactions SET paid = $2 WHERE id = $1\", \n      [req.params.id, true]);\n    await pool.query(\"UPDATE users SET money = money - $2 WHERE id = $1\", \n      [req.user.id, item.money]);\n      res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\ntransactionRouter.put(\"/:id/undo\", async (req, res, next) => {\n  try {\n    const item = await fetchTransaction(req.params.id);\n    await pool.query(\"UPDATE transactions SET paid = $2 WHERE id = $1\", \n      [req.params.id, false]);\n    await pool.query(\"UPDATE users SET money = money + $2 WHERE id = $1\", \n      [req.user.id, item.money]);\n      res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\ntransactionRouter.delete(\"/:id/delete\", async (req, res, next) => {\n  try {\n    const item = await fetchTransaction(req.params.id);\n    if(item.name === \"pay-off-official\"){\n      await pool.query(\"UPDATE users SET money = money + $2 WHERE id = $1\", \n        [req.user.id, item.money]);\n    }\n    await pool.query(\"DELETE FROM transactions WHERE id = $1\", \n      [req.params.id]);\n    res.redirect(\"/\");\n  } catch (error) {\n    console.error(error);\n    next(error);\n  }\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n////                                  Helper Functions                                        ////\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n// get transaction for update\nasync function fetchTransaction(id){\n  try{\n    const { rows } = await pool.query(\"SELECT * FROM transactions WHERE id = $1\", [id]);\n    const item = rows[0];\n    if(item) {\n      return item;\n    } else {\n      console.log('Transaction not found');\n    }\n  } catch(error) {\n    console.error('Error, cannot find transaction with id = $1', [id]);\n  }\n}\n\n//Add to delete and put functions\nasync function verifyUser(user_id,transaction_id){\n  const rows = await pool.query(\"SELECT * FROM transaction WHERE id = $1\", [transaction_id]);\n  const row = rows[0];\n  if(row){\n    if(row.user_id == user_id){\n      console.log()\n    } else {\n      console.log('User_id $1 does not match the transaction user id $2', [user_id, row.user_id]);\n    }\n  } else {\n    console.error('Error, cannot find transaction');\n  }\n}\n\nmodule.exports = transactionRouter;\n","size_bytes":4902}},"version":1}